from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mr.models.base_model import Model
from mr import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, uri=None):  # noqa: E501
        """Environment - a model defined in OpenAPI

        :param name: The name of this Environment.  # noqa: E501
        :type name: str
        :param uri: The uri of this Environment.  # noqa: E501
        :type uri: str
        """
        self.openapi_types = {
            'name': str,
            'uri': str
        }

        self.attribute_map = {
            'name': 'name',
            'uri': 'uri'
        }

        self._name = name
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Environment of this Environment.  # noqa: E501
        :rtype: Environment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Environment.


        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Environment.


        :param name: The name of this Environment.
        :type name: str
        """

        self._name = name

    @property
    def uri(self) -> str:
        """Gets the uri of this Environment.


        :return: The uri of this Environment.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this Environment.


        :param uri: The uri of this Environment.
        :type uri: str
        """

        self._uri = uri
